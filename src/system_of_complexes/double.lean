import hacks_and_tricks.by_exactI_hack
import system_of_complexes.basic
import normed_group.NormedGroup
import facts

universe variables v u
noncomputable theory
open opposite category_theory
open_locale nnreal

/-!
# Systems of double complexes of normed abelian groups

In this file we define systems of double complexes of normed abelian groups,
as needed for Definition 9.6 of [Analytic].

## Main declarations

* `system_of_double_complexes`: a system of complexes of normed abelian groups.
* `admissible`: such a system is *admissible* if all maps that occur in the system
    are norm-nonincreasing.
-/

/-- A system of double complexes of normed abelian groups, indexed by `‚Ñù‚â•0`.
See also Definition 9.3 of [Analytic]. -/
@[derive category_theory.category]
def system_of_double_complexes : Type (u+1) :=
‚Ñù‚â•0·µí·µñ ‚•§ (cochain_complex ‚Ñï (cochain_complex ‚Ñï NormedGroup.{u}))

namespace system_of_double_complexes

variables (C : system_of_double_complexes)

/-- `C.X c p q` is the object $C_c^{p,q}$ in a system of double complexes `C`. -/
def X (c : ‚Ñù‚â•0) (p q : ‚Ñï) : NormedGroup :=
((C.obj $ op c).X p).X q

/-- `C.res` is the restriction map `C.X c' p q ‚ü∂ C.X c p q` for a system of complexes `C`,
and nonnegative reals `c ‚â§ c'`. -/
def res {c' c : ‚Ñù‚â•0} {p q : ‚Ñï} [h : fact (c ‚â§ c')] :
  C.X c' p q ‚ü∂ C.X c p q :=
((C.map (hom_of_le h.out).op).f p).f q

variables (c : ‚Ñù‚â•0) {c‚ÇÅ c‚ÇÇ c‚ÇÉ : ‚Ñù‚â•0} (p p' q q' : ‚Ñï)

@[simp] lemma res_refl : @res C c c p q _ = ùüô _ :=
begin
  have := (category_theory.functor.map_id C (op $ c)),
  delta res, erw this, refl
end

@[simp] lemma norm_res_of_eq (h : c‚ÇÇ = c‚ÇÅ) (x : C.X c‚ÇÅ p q) : ‚à•@res C _ _ p q ‚ü®h.le‚ü© x‚à• = ‚à•x‚à• :=
by { cases h, rw res_refl, refl }

@[simp] lemma res_comp_res (h‚ÇÅ : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) (h‚ÇÇ : fact (c‚ÇÉ ‚â§ c‚ÇÇ)) :
  @res C _ _ p q h‚ÇÅ ‚â´ @res C _ _ p q h‚ÇÇ  = @res C _ _ p q ‚ü®h‚ÇÇ.out.trans h‚ÇÅ.out‚ü© :=
begin
  have := (category_theory.functor.map_comp C (hom_of_le h‚ÇÅ.out).op (hom_of_le h‚ÇÇ.out).op),
  rw [‚Üê op_comp] at this,
  delta res, erw this, refl,
end

@[simp] lemma res_res (h‚ÇÅ : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) (h‚ÇÇ : fact (c‚ÇÉ ‚â§ c‚ÇÇ)) (x : C.X c‚ÇÅ p q) :
  @res C _ _ p q h‚ÇÇ (@res C _ _ p q h‚ÇÅ x) = @res C _ _ p q ‚ü®h‚ÇÇ.out.trans h‚ÇÅ.out‚ü© x :=
by { rw ‚Üê (C.res_comp_res p q h‚ÇÅ h‚ÇÇ), refl }

/-- `C.d` is the differential `C.X c p q ‚ü∂ C.X c (p+1) q` for a system of double complexes `C`. -/
def d {c : ‚Ñù‚â•0} (p p' : ‚Ñï) {q : ‚Ñï} : C.X c p q ‚ü∂ C.X c p' q :=
((C.obj $ op c).d p p').f q

lemma d_eq_zero (c : ‚Ñù‚â•0) (h : p + 1 ‚â† p') : (C.d p p' : C.X c p q ‚ü∂ _) = 0 :=
by { have : (C.obj (op c)).d p p' = 0 := (C.obj $ op c).d_eq_zero h, rw [d, this], refl }

lemma d_eq_zero_apply (c : ‚Ñù‚â•0) (h : p + 1 ‚â† p') (x : C.X c p q) : (C.d p p' x) = 0 :=
by { rw [d_eq_zero C p p' q c h], refl }

@[simp] lemma d_self_apply (c : ‚Ñù‚â•0) (x : C.X c p q) : (C.d p p x) = 0 :=
d_eq_zero_apply _ _ _ _ _ p.succ_ne_self _

lemma d_comp_res (h : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) :
  C.d p p' ‚â´ @res C _ _ _ q h = @res C _ _ p q _ ‚â´ C.d p p' :=
congr_fun (congr_arg differential_object.hom.f ((C.map (hom_of_le h.out).op).comm p p')) q

lemma d_res (h : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) (x) :
  @d C c‚ÇÇ p p' q (@res C _ _ p q _ x) = @res C _ _ _ _ h (@d C c‚ÇÅ p p' q x) :=
show (@res C _ _ p q _ ‚â´ C.d p p') x = (C.d p p' ‚â´ @res C _ _ _ _ h) x,
by rw d_comp_res

@[simp] lemma d_comp_d {c : ‚Ñù‚â•0} {p p' p'' q : ‚Ñï} :
  @d C c p p' q ‚â´ C.d p' p'' = 0 :=
congr_fun (congr_arg differential_object.hom.f ((C.obj $ op c).d_comp_d p p' p'')) q

@[simp] lemma d_d {c : ‚Ñù‚â•0} {p p' p'' q : ‚Ñï} (x : C.X c p q) :
  C.d p' p'' (C.d p p' x) = 0 :=
show (C.d _ _ ‚â´ C.d _ _) x = 0, by { rw d_comp_d, refl }

/-- `C.d'` is the differential `C.X c p q ‚ü∂ C.X c p (q+1)` for a system of double complexes `C`. -/
def d' {c : ‚Ñù‚â•0} {p : ‚Ñï} (q q' : ‚Ñï) : C.X c p q ‚ü∂ C.X c p q' :=
((C.obj $ op c).X p).d q q'

lemma d'_eq_zero (c : ‚Ñù‚â•0) (h : q + 1 ‚â† q') : (C.d' q q' : C.X c p q ‚ü∂ _) = 0 :=
((C.obj $ op c).X p).d_eq_zero h

lemma d'_eq_zero_apply (c : ‚Ñù‚â•0) (h : q + 1 ‚â† q') (x : C.X c p q) : (C.d' q q' x) = 0 :=
by { rw [d'_eq_zero C p q q' c h], refl }

@[simp] lemma d'_self_apply (c : ‚Ñù‚â•0) (x : C.X c p q) : (C.d' q q x) = 0 :=
d'_eq_zero_apply _ _ _ _ _ q.succ_ne_self _

lemma d'_comp_res (h : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) :
  @d' C c‚ÇÅ p q q' ‚â´ @res C _ _ _ _ h = @res C _ _ p q _ ‚â´ @d' C c‚ÇÇ p q q' :=
((C.map (hom_of_le h.out).op).f p).comm q q'

lemma d'_res (h : fact (c‚ÇÇ ‚â§ c‚ÇÅ)) (x) :
  C.d' q q' (@res C _ _ p q _ x) = @res C _ _ _ _ h (C.d' q q' x) :=
show (@res C _ _ p q _ ‚â´ C.d' q q') x = (C.d' q q' ‚â´ @res C _ _ _ _ h) x,
by rw d'_comp_res

@[simp] lemma d'_comp_d' {c : ‚Ñù‚â•0} {p q q' q'' : ‚Ñï} :
  @d' C c p q q' ‚â´ C.d' q' q'' = 0 :=
((C.obj $ op c).X p).d_comp_d q q' q''

@[simp] lemma d'_d' {c : ‚Ñù‚â•0} {p q q' q'' : ‚Ñï} (x : C.X c p q) :
  C.d' q' q'' (C.d' q q' x) = 0 :=
show (C.d' _ _ ‚â´ C.d' _ _) x = 0, by { rw d'_comp_d', refl }

lemma d'_comp_d (c : ‚Ñù‚â•0) (p p' q q' : ‚Ñï) :
  C.d' q q' ‚â´ C.d p p' = C.d p p' ‚â´ (C.d' q q' : C.X c p' q ‚ü∂ _) :=
((C.obj $ op c).d p p').comm q q'

lemma d'_d (c : ‚Ñù‚â•0) (p p' q q' : ‚Ñï) (x : C.X c p q) :
  C.d' q q' (C.d p p' x) = C.d p p' (C.d' q q' x) :=
show (C.d p p' ‚â´ C.d' q q') x = (C.d' q q' ‚â´ C.d p p') x,
by rw [d'_comp_d]

/-- Convenience definition:
The identity morphism of an object in the system of double complexes
when it is given by different indices that are not
definitionally equal. -/
def congr {c c' : ‚Ñù‚â•0} {p p' q q' : ‚Ñï} (hc : c = c') (hp : p = p') (hq : q = q') :
  C.X c p q ‚ü∂ C.X c' p' q' :=
eq_to_hom $ by { subst hc, subst hp, subst hq, }

-- attribute [simps] differential_object.forget

/-- The `p`-th row in a system of double complexes, as system of complexes.
  It has object `(C.obj c).X p`over `c`. -/
def row (C : system_of_double_complexes.{u}) (p : ‚Ñï) : system_of_complexes.{u} :=
C ‚ãô induced_functor _ ‚ãô differential_object.forget _ _ ‚ãô pi.eval _ p

@[simp] lemma row_X (C : system_of_double_complexes) (p q : ‚Ñï) (c : ‚Ñù‚â•0) :
  C.row p c q = C.X c p q :=
rfl

@[simp] lemma row_res (C : system_of_double_complexes) (p q : ‚Ñï) {c' c : ‚Ñù‚â•0} [h : fact (c ‚â§ c')] :
  @system_of_complexes.res (C.row p) _ _ q h  = @res C _ _ p q h :=
rfl

@[simp] lemma row_d (C : system_of_double_complexes) (c : ‚Ñù‚â•0) (p : ‚Ñï) :
  (C.row p).d = @d' C c p :=
rfl

/-- The differential between rows in a system of double complexes,
as map of system of complexes. -/
def row_map (C : system_of_double_complexes.{u}) (p p' : ‚Ñï) :
  C.row p ‚ü∂ C.row p' :=
{ app := Œª c,
  { f := Œª q, (C.d p p' : C.X c.unop p q ‚ü∂ C.X c.unop p' q),
    comm := Œª q q', (C.d'_comp_d _ p p' q q') },
  naturality' := Œª c‚ÇÅ c‚ÇÇ h, ((C.map h).comm p p').symm }

@[simp] lemma row_map_apply (C : system_of_double_complexes.{u})
  (c : ‚Ñù‚â•0) (p p' q : ‚Ñï) (x : C.X c p q) :
  C.row_map p p' x = C.d p p' x := rfl

/-- The `q`-th column in a system of double complexes, as system of complexes. -/
def col (C : system_of_double_complexes.{u}) (q : ‚Ñï) : system_of_complexes.{u} :=
C ‚ãô functor.map_complex_like' (induced_functor _ ‚ãô differential_object.forget _ _ ‚ãô pi.eval _ q)
  (by { intros, ext, refl })

@[simp] lemma col_X (C : system_of_double_complexes) (p q : ‚Ñï) (c : ‚Ñù‚â•0) :
  C.col q c p = C.X c p q :=
rfl

@[simp] lemma col_res (C : system_of_double_complexes) (p q : ‚Ñï) {c' c : ‚Ñù‚â•0} [h : fact (c ‚â§ c')] :
  @system_of_complexes.res (C.col q) _ _ _ _ = @res C _ _ p q h :=
rfl

@[simp] lemma col_d (C : system_of_double_complexes) (c : ‚Ñù‚â•0) (p p' q : ‚Ñï) :
  (C.col q).d p p' = @d C c p p' q :=
rfl

/-- The differential between columns in a system of double complexes,
as map of system of complexes. -/
def col_map (C : system_of_double_complexes.{u}) (q q' : ‚Ñï) :
  C.col q ‚ü∂ C.col q' :=
{ app := Œª c,
  { f := Œª p, (C.d' q q' : C.X c.unop p q ‚ü∂ C.X c.unop p q'),
    comm := Œª p p', (C.d'_comp_d _ p p' q q').symm },
  naturality' := Œª c‚ÇÅ c‚ÇÇ h, by { ext p : 2, exact (((C.map h).f p).comm q q').symm } }

/-- A system of double complexes is *admissible*
if all the differentials and restriction maps are norm-nonincreasing.

See Definition 9.3 of [Analytic]. -/
structure admissible (C : system_of_double_complexes) : Prop :=
(d_norm_noninc' : ‚àÄ c p p' q (h : p + 1 = p') (x : C.X c p q), ‚à•C.d p p' x‚à• ‚â§ ‚à•x‚à•)
(d'_norm_noninc' : ‚àÄ c p q q' (h : q + 1 = q') (x : C.X c p q), ‚à•C.d' q q' x‚à• ‚â§ ‚à•x‚à•)
(res_norm_noninc : ‚àÄ c' c p q h (x : C.X c' p q), ‚à•@res C c' c p q h x‚à• ‚â§ ‚à•x‚à•)

namespace admissible

variables {C}

lemma d_norm_noninc (hC : C.admissible) (c : ‚Ñù‚â•0) (p p' q : ‚Ñï) :
  (C.d p p' : C.X c p q ‚ü∂ _).norm_noninc :=
begin
  by_cases h : p + 1 = p',
  { exact hC.d_norm_noninc' c p p' q h },
  { rw C.d_eq_zero p p' q c h, intro v, simp }
end

lemma d'_norm_noninc (hC : C.admissible) (c : ‚Ñù‚â•0) (p q q' : ‚Ñï) :
  (C.d' q q' : C.X c p q ‚ü∂ _).norm_noninc :=
begin
  by_cases h : q + 1 = q',
  { exact hC.d'_norm_noninc' c p q q' h },
  { rw C.d'_eq_zero p q q' c h, intro v, simp }
end

lemma col (hC : C.admissible) (q : ‚Ñï) : (C.col q).admissible :=
{ d_norm_noninc' := Œª c i j h, hC.d_norm_noninc _ _ _ _,
  res_norm_noninc := Œª c i j h, hC.res_norm_noninc _ _ _ _ _ }

lemma row (hC : C.admissible) (p : ‚Ñï) : (C.row p).admissible :=
{ d_norm_noninc' := Œª c i j h, hC.d'_norm_noninc _ _ _ _,
  res_norm_noninc := Œª c i j h, hC.res_norm_noninc _ _ _ _ _ }

end admissible

end system_of_double_complexes
