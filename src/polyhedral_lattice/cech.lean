import algebraic_topology.simplicial_object

import polyhedral_lattice.finsupp
import polyhedral_lattice.category

import for_mathlib.free_abelian_group
import for_mathlib.normed_group_quotient
import for_mathlib.finsupp

/-!
# The ƒåech conerve attached to `Œõ ‚Üí Œõ'`

Let `f : Œõ ‚Üí Œõ'` be a morphism of polyhedral lattices.
(We probably need to assume that the cokernel is torsion-free...)

In this file we construct the ƒåech conerve attached to `f`.

Concretely, but in pseudo-code:
it consists of the objects `Œõ'^(m)` defined as `(Œõ')^m/L`,
where `L` is the sublattice `Œõ ‚äó {x : ‚Ñ§^m | ‚àë x = 0}`.
-/

noncomputable theory

open_locale big_operators

local attribute [-instance] add_comm_monoid.nat_semimodule add_comm_group.int_module

namespace polyhedral_lattice

variables {Œõ Œõ' : Type*} [polyhedral_lattice Œõ] [polyhedral_lattice Œõ']
variables (f : polyhedral_lattice_hom Œõ Œõ')

namespace conerve

section objects

/-!
## The objects
-/

variables (m : ‚Ñï)

def L : add_subgroup (fin m ‚Üí‚ÇÄ Œõ') :=
add_subgroup.closure $
{x | ‚àÉ (l : Œõ) (n : fin m ‚Üí‚ÇÄ ‚Ñ§) (hn : n.sum (Œª _, add_monoid_hom.id _) = 0),
     x = finsupp.map_range_hom (int.cast_add_hom' (f l)) n}

def obj := quotient_add_group.quotient (L f m)

-- we can remove this as soon as we have `seminormed_group`
instance : is_closed (L f m : set (fin m ‚Üí‚ÇÄ Œõ')) := sorry

instance : normed_group (obj f m) :=
normed_group_hom.normed_group_quotient _

instance : polyhedral_lattice (obj f m) :=
{ nat_semimodule := add_comm_monoid.nat_semimodule,
  int_semimodule := add_comm_group.int_module,
  is_scalar_tower := by convert add_comm_monoid.nat_is_scalar_tower,
  finite_free := sorry, -- we will need some sort of torsion-free condition on the cokernel of `f`
  polyhedral :=
  begin
    obtain ‚ü®Œπ, _inst_Œπ, l, hl‚ü© := polyhedral_lattice.polyhedral (fin m ‚Üí‚ÇÄ Œõ'),
    refine ‚ü®Œπ, _inst_Œπ, (Œª i, quotient_add_group.mk (l i)), _‚ü©,
    intros x,
    apply quotient_add_group.induction_on x; clear x,
    intro x,
    obtain ‚ü®d, hd, c, H1, H2‚ü© := hl x,
    refine ‚ü®d, hd, c, _, _‚ü©,
    { show d ‚Ä¢ quotient_add_group.mk' _ x = _,
      rw [‚Üê nsmul_eq_smul, ‚Üê add_monoid_hom.map_nsmul, nsmul_eq_smul, H1,
        add_monoid_hom.map_sum],
      apply fintype.sum_congr,
      intro i,
      rw [‚Üê nsmul_eq_smul, add_monoid_hom.map_nsmul],
      exact @nsmul_eq_smul _ _ add_comm_monoid.nat_semimodule _ _ },
    { dsimp,
      sorry }
  end }

end objects

section maps

/-!
## The simplicial maps
-/

open finsupp

variables {n m k : ‚Ñï} (g : fin (n+1) ‚Üí fin (m+1)) (g' : fin (m+1) ‚Üí fin (k+1))

lemma L_le_comap : (L f (n+1)) ‚â§ (L f (m+1)).comap (map_domain_hom g) :=
begin
  rw [L, add_subgroup.closure_le],
  rintros _ ‚ü®l, c, hc, rfl‚ü©,
  rw [set_like.mem_coe, add_subgroup.mem_comap],
  apply add_subgroup.subset_closure,
  refine ‚ü®l, c.map_domain g, _, _‚ü©,
  { rwa sum_map_domain_index_add_monoid_hom },
  { simp only [‚Üê add_monoid_hom.comp_apply, ‚Üê map_range_hom_map_domain_hom], refl }
end

-- the underlying morphism of additive groups
def map_add_hom : obj f (n+1) ‚Üí+ obj f (m+1) :=
quotient_add_group.map _ _ (map_domain_hom g) (L_le_comap f g)

-- move this
@[simp] lemma norm_ite {V : Type*} [normed_group V] (P : Prop) {hP : decidable P} (x y : V) :
  ‚à•(if P then x else y)‚à• = if P then ‚à•x‚à• else ‚à•y‚à• :=
by split_ifs; refl

lemma map_domain_hom_strict (x : fin (n+1) ‚Üí‚ÇÄ Œõ) : ‚à•map_domain_hom g x‚à• ‚â§ ‚à•x‚à• :=
begin
  simp only [norm_def, map_domain_hom_apply],
  dsimp [map_domain],
  rw [sum_eq_sum_fintype], swap, { intro, exact norm_zero },
  simp only [sum_apply],
  rw [sum_eq_sum_fintype], swap, { intro, exact norm_zero },
  calc ‚àë i, ‚à•x.sum (Œª j l, single (g j) l i)‚à•
      ‚â§ ‚àë i, ‚àë j, ‚à•single (g j) (x j) i‚à• : _
  ... ‚â§ ‚àë j, ‚à•x j‚à• : _,
  { apply finset.sum_le_sum,
    rintro i -,
    rw sum_eq_sum_fintype, swap, { intro, rw [single_zero, zero_apply] },
    exact norm_sum_le _ _ },
  { rw finset.sum_comm,
    apply finset.sum_le_sum,
    rintro j -,
    simp only [single_apply, norm_ite, norm_zero],
    apply le_of_eq,
    have := @finset.sum_ite_eq _ ‚Ñù _ _ finset.univ (g j) (Œª _, ‚à•x j‚à•),
    simp only [finset.mem_univ, if_true] at this,
    convert this, ext, split_ifs; refl, }
end

lemma map_add_hom_strict (x : obj f (n+1)) : ‚à•map_add_hom f g x‚à• ‚â§ ‚à•x‚à• :=
begin
  apply le_of_forall_pos_le_add,
  intros Œµ hŒµ,
  obtain ‚ü®x, rfl, h‚ü© := normed_group_hom.norm_mk_lt x hŒµ,
  calc _ ‚â§ ‚à•map_domain_hom g x‚à• : normed_group_hom.quotient_norm_mk_le _ _
  ... ‚â§ ‚à•x‚à• : map_domain_hom_strict _ _
  ... ‚â§ _ : h.le,
end

lemma map_add_hom_mk (x : fin (n+1) ‚Üí‚ÇÄ Œõ') :
  (map_add_hom f g) (quotient_add_group.mk x) = quotient_add_group.mk (map_domain_hom g x) :=
rfl

@[simps]
def map : polyhedral_lattice_hom (obj f (n+1)) (obj f (m+1)) :=
{ strict' := map_add_hom_strict f g,
  .. map_add_hom f g }

lemma map_id : map f (id : fin (m+1) ‚Üí fin (m+1)) = polyhedral_lattice_hom.id :=
begin
  ext x,
  apply quotient_add_group.induction_on x; clear x,
  intro x,
  simp only [add_monoid_hom.to_fun_eq_coe, map_apply, polyhedral_lattice_hom.id_apply,
    map_add_hom_mk, map_domain_hom_apply, map_domain_id],
end

lemma map_comp : map f (g' ‚àò g) = (map f g').comp (map f g) :=
begin
  ext x,
  apply quotient_add_group.induction_on x; clear x,
  intro x,
  simp only [add_monoid_hom.to_fun_eq_coe, map_apply, polyhedral_lattice_hom.comp_apply,
    map_add_hom_mk, map_domain_hom_apply, ‚Üê map_domain_comp],
end

end maps

end conerve

end polyhedral_lattice

namespace PolyhedralLattice

universe variables u

open polyhedral_lattice simplex_category category_theory

variables {Œõ Œõ' : PolyhedralLattice.{u}} (f : Œõ ‚ü∂ Œõ')

namespace Cech_conerve

def obj (m : ‚Ñï) : PolyhedralLattice := of (conerve.obj f (m+1))

def map_succ_zero_aux (m : ‚Ñï) (g : fin (m+2) ‚Üí‚Çò fin 1) : obj f (m+1) ‚Üí+ Œõ' :=
(finsupp.apply_add_hom (0 : fin 1)).comp $
quotient_add_group.lift _ (finsupp.map_domain_hom g)
begin
  intros x hx,
  rw ‚Üê add_monoid_hom.mem_ker,
  revert hx x,
  apply (add_subgroup.closure_le _).mpr _,
  rintro _ ‚ü®l, c, hc, rfl‚ü©,
  dsimp,
  rw [set_like.mem_coe, add_monoid_hom.mem_ker, ‚Üê finsupp.map_range_hom_apply,
    ‚Üê add_monoid_hom.comp_apply, ‚Üê finsupp.map_range_hom_map_domain_hom, add_monoid_hom.comp_apply],
  suffices : finsupp.map_domain g c = 0,
  { rw [finsupp.map_domain_hom_apply, this, add_monoid_hom.map_zero] },
  ext i,
  simp only [finsupp.map_domain, finsupp.sum_apply, finsupp.single_apply],
  convert hc,
  ext,
  rw if_pos, { refl },
  exact subsingleton.elim _ _
end

def map_succ_zero (m : ‚Ñï) (g : fin (m+2) ‚Üí‚Çò fin 1) : obj f (m+1) ‚ü∂ Œõ' :=
{ strict' :=
  begin
    intro x,
    apply le_of_forall_pos_le_add,
    intros Œµ hŒµ,
    obtain ‚ü®x, rfl, h‚ü© := normed_group_hom.norm_mk_lt x hŒµ,
    calc ‚à•finsupp.map_domain_hom g x 0‚à•
        ‚â§ ‚à•finsupp.map_domain_hom g x‚à• : _
    ... ‚â§ ‚à•x‚à• : conerve.map_domain_hom_strict g x
    ... ‚â§ _ : h.le,
    rw [finsupp.norm_def, finsupp.sum_eq_sum_fintype, fin.sum_univ_succ, fin.sum_univ_zero, add_zero],
    intro, exact norm_zero
  end,
  .. map_succ_zero_aux f m g }

-- def map : Œ† ‚¶Ém n : ‚Ñï‚¶Ñ (g : fin (m+1) ‚Üí‚Çò fin (n+1)), obj f m ‚ü∂ obj f n
-- | 0     0     g := ùüô _
-- | 0     (n+1) g := map_zero_succ f n g
-- | (m+1) 0     g := map_succ_zero f m g
-- | (m+1) (n+1) g := conerve.map f g

-- move this, generalize to arbitrary subsingletons
lemma preorder_hom_eq_id (g : fin 1 ‚Üí‚Çò fin 1) : g = preorder_hom.id :=
by { ext1, exact subsingleton.elim _ _ }

-- @[simp] lemma map_zero_zero (g : fin 1 ‚Üí‚Çò fin 1) : map f g = ùüô _ := rfl

-- lemma map_id : ‚àÄ m, map f (preorder_hom.id : fin (m+1) ‚Üí‚Çò fin (m+1)) = ùüô _
-- | 0     := rfl
-- | (m+1) := conerve.map_id f

-- lemma map_comp : ‚àÄ k m n (g : fin (k+1) ‚Üí‚Çò fin (m+1)) (g' : fin (m+1) ‚Üí‚Çò fin (n+1)),
--   map f (g'.comp g) = map f g ‚â´ map f g'
-- | 0     0     0     g g' := (category.id_comp _).symm
-- | 0     0     (n+1) g g' := by { rw [preorder_hom_eq_id g], refl }
-- | 0     (m+1) 0     g g' := by { rw [preorder_hom_eq_id (g'.comp g), map_id], admit }
-- | 0     (m+1) (n+1) g g' := by { admit }
-- | (k+1) 0     0     g g' := by { rw [preorder_hom_eq_id g'], refl }
-- | (k+1) 0     (n+1) g g' :=
-- begin
--   ext x, apply quotient_add_group.induction_on x; clear x,
--   intro x, admit
-- end
-- | (k+1) (m+1) 0     g g' :=
-- begin
--   ext x, apply quotient_add_group.induction_on x; clear x,
--   intro x, admit
-- end
-- | (k+1) (m+1) (n+1) g g' := conerve.map_comp f _ _

end Cech_conerve

open Cech_conerve

@[simps]
def Cech_conerve : simplex_category ‚•§ PolyhedralLattice :=
{ obj := Œª n, obj f n.len,
  map := Œª n m g, conerve.map f g.to_preorder_hom,
  map_id' := Œª _, conerve.map_id f,
  map_comp' := Œª _ _ _ _ _, conerve.map_comp f _ _ }


@[simps]
def augmentation_map_aux (n : ‚Ñï) (g : fin 1 ‚Üí‚Çò fin (n+1)) : Œõ' ‚ü∂ obj f n :=
{ strict' := Œª l,
  begin
    calc _ ‚â§ ‚à•(finsupp.single (g 0)) l‚à• : normed_group_hom.quotient_norm_mk_le _ _
    ... ‚â§ ‚à•l‚à• : _,
    rw [finsupp.norm_def, finsupp.sum_single_index],
    exact norm_zero
  end,
  .. (quotient_add_group.mk' $ conerve.L _ _).comp (finsupp.single_add_hom (g 0)) }

def Cech_augmentation_map : Œõ ‚ü∂ (Cech_conerve f).obj (mk 0) :=
f ‚â´ augmentation_map_aux f 0 preorder_hom.id

lemma augmentation_map_equalizes :
  Cech_augmentation_map f ‚â´ (Cech_conerve f).map (Œ¥ 0) =
  Cech_augmentation_map f ‚â´ (Cech_conerve f).map (Œ¥ 1) :=
begin
  sorry
  /-
  ext l,
  show augmentation_map_aux f 1 (Œ¥ 0) (f l) = augmentation_map_aux f 1 (Œ¥ 1) (f l),
  simp only [Cech_conerve.map_zero_succ_apply, add_monoid_hom.coe_comp,
    add_monoid_hom.to_fun_eq_coe, finsupp.single_add_hom_apply, function.comp_app,
    quotient_add_group.mk'_eq_mk'_iff],
  apply add_subgroup.subset_closure,
  refine ‚ü®l, finsupp.single 1 1 - finsupp.single 0 1, _, _‚ü©,
  { rw [finsupp.sum_eq_sum_fintype],
    swap, { intro, refl },
    simp only [fin.sum_univ_succ, fin.sum_univ_zero, add_zero, finsupp.sub_apply,
      add_monoid_hom.id_apply, finsupp.single_apply, fin.one_eq_zero_iff,
      if_true, zero_sub, fin.zero_eq_one_iff, eq_self_iff_true, sub_zero, fin.succ_zero_eq_one,
      add_left_neg, if_false, one_ne_zero] },
  { simp only [add_monoid_hom.map_sub],
    simp only [finsupp.map_range_hom_apply, finsupp.map_range_single, int.cast_add_hom'_one],
    refl }
  -/
end

end PolyhedralLattice
