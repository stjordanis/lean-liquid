import pseudo_normed_group.LC

open_locale classical nnreal
noncomputable theory
local attribute [instance] type_pow

open NormedGroup opposite Profinite pseudo_normed_group category_theory breen_deligne
open profinitely_filtered_pseudo_normed_group

universe variable u
variables (r : ‚Ñù‚â•0) (V : NormedGroup) (r' : ‚Ñù‚â•0)
variables (c c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ : ‚Ñù‚â•0) (l m n : ‚Ñï)

/-- The "functor" that sends `M` and `c` to `V-hat((filtration M c)^n)` -/
def CLCP (V : NormedGroup) (n : ‚Ñï) : Profinite·µí·µñ ‚•§ NormedGroup :=
LCP V n ‚ãô Completion

namespace CLCP

lemma map_norm_noninc {M‚ÇÅ M‚ÇÇ} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) : ((CLCP V n).map f).norm_noninc :=
Completion_map_norm_noninc _ $ LCP.map_norm_noninc _ _ _

def T_inv [normed_with_aut r V] [fact (0 < r)] : CLCP V n ‚ü∂ CLCP V n :=
whisker_right (LCP.T_inv r V n) Completion

end CLCP

/-- The "functor" that sends `M` and `c` to `V-hat((filtration M c)^n)` -/
def CLCFP (V : NormedGroup) (r' : ‚Ñù‚â•0) (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  (ProFiltPseuNormGrpWithTinv r')·µí·µñ ‚•§ NormedGroup :=
((Filtration r').obj c).op ‚ãô CLCP V n

theorem CLCFP_def (V : NormedGroup) (r' : ‚Ñù‚â•0) (c : ‚Ñù‚â•0) (n : ‚Ñï) :
  CLCFP V r' c n = LCFP V r' c n ‚ãô Completion := rfl

namespace CLCFP

lemma map_norm_noninc {M‚ÇÅ M‚ÇÇ} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) : ((CLCFP V r' c n).map f).norm_noninc :=
CLCP.map_norm_noninc _ _ _

@[simps app]
def res [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] : CLCFP V r' c‚ÇÅ n ‚ü∂ CLCFP V r' c‚ÇÇ n :=
(whisker_right (LCFP.res V r' c‚ÇÅ c‚ÇÇ n) Completion : _)

lemma res_def [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] :
  res V r' c‚ÇÅ c‚ÇÇ n = whisker_right (nat_trans.op (Filtration.res r' c‚ÇÇ c‚ÇÅ)) (CLCP V n) :=
rfl

lemma res_app' [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] (M : (ProFiltPseuNormGrpWithTinv r')·µí·µñ) :
  (res V r' c‚ÇÅ c‚ÇÇ n).app M = (CLCP V n).map ((Filtration.res r' c‚ÇÇ c‚ÇÅ).app (unop M)).op :=
rfl

@[simp] lemma res_refl : res V r' c c n = ùüô _ :=
by { simp only [res, LCFP.res_refl, whisker_right_id'], refl }

lemma res_comp_res [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [fact (c‚ÇÉ ‚â§ c‚ÇÇ)] [fact (c‚ÇÉ ‚â§ c‚ÇÅ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ res V r' c‚ÇÇ c‚ÇÉ n = res V r' c‚ÇÅ c‚ÇÉ n :=
by simp only [res, ‚Üê whisker_right_comp, LCFP.res_comp_res]

lemma res_norm_noninc [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] (M) :
  ((res V r' c‚ÇÅ c‚ÇÇ n).app M).norm_noninc :=
Completion_map_norm_noninc _ $ LCFP.res_norm_noninc _ _ _ _ _ _

section Tinv
open profinitely_filtered_pseudo_normed_group_with_Tinv
variables [fact (0 < r')] [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)]

-- @[simps obj {fully_applied := ff}]
def Tinv : CLCFP V r' c‚ÇÅ n ‚ü∂ CLCFP V r' c‚ÇÇ n :=
(whisker_right (nat_trans.op $ FiltrationPow.Tinv r' c‚ÇÇ c‚ÇÅ n)
  (LocallyConstant.obj V ‚ãô Completion) : _)
.

lemma Tinv_def : Tinv V r' c‚ÇÅ c‚ÇÇ n =
  (whisker_right (LCFP.Tinv V r' c‚ÇÅ c‚ÇÇ n) Completion : _) := rfl

lemma Tinv_def' : Tinv V r' c‚ÇÅ c‚ÇÇ n =
  whisker_right (nat_trans.op $ Filtration.Tinv‚ÇÄ c‚ÇÇ c‚ÇÅ) (CLCP V n) := rfl

lemma res_comp_Tinv [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [fact (c‚ÇÉ ‚â§ c‚ÇÇ)] [fact (c‚ÇÉ ‚â§ r' * c‚ÇÇ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ Tinv V r' c‚ÇÇ c‚ÇÉ n = Tinv V r' c‚ÇÅ c‚ÇÇ n ‚â´ res V r' c‚ÇÇ c‚ÇÉ n :=
begin
  simp only [Tinv, res, LCFP.res, whisker_right_twice, ‚Üê whisker_right_comp, ‚Üê nat_trans.op_comp],
  refl
end

end Tinv

section T_inv

variables [normed_with_aut r V] [fact (0 < r)]

@[simps app_apply {fully_applied := ff}]
def T_inv : CLCFP V r' c n ‚ü∂ CLCFP V r' c n :=
whisker_left ((Filtration r').obj c).op (CLCP.T_inv r V n)

lemma T_inv_def : T_inv r V r' c n = (whisker_right (LCFP.T_inv r V r' c n) Completion : _) :=
rfl

lemma T_inv_app [fact (0 < r)] (M : (ProFiltPseuNormGrpWithTinv r')·µí·µñ) :
  (T_inv r V r' c n).app M =
    (CLCP.T_inv r V n).app (((Filtration r').obj c).op.obj M) :=
rfl

lemma res_comp_T_inv [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ T_inv r V r' c‚ÇÇ n =
    T_inv r V r' c‚ÇÅ n ‚â´ res V r' c‚ÇÅ c‚ÇÇ n :=
begin
  ext M : 2,
  simp only [nat_trans.comp_app, res_app', T_inv_app],
  exact (CLCP.T_inv r V n).naturality _,
end

end T_inv

end CLCFP

namespace breen_deligne

open CLCFP
variables {l m n}

-- namespace basic_universal_map

-- variables (œï : basic_universal_map m n)

-- @[simps]
-- def eval_CLCFP : CLCFP V r' c‚ÇÇ n ‚ü∂ CLCFP V r' c‚ÇÅ m :=
-- Completion.map (œï.eval_LCFP V r' c‚ÇÅ c‚ÇÇ)

-- lemma map_comp_eval_CLCFP [œï.suitable c‚ÇÅ c‚ÇÇ] :
--   map V r' c‚ÇÇ n f ‚â´ œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ = œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ ‚â´ map V r' c‚ÇÅ m f :=
-- by simp only [map, eval_CLCFP, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp, map_comp_eval_LCFP]

-- lemma res_comp_eval_CLCFP
--   [fact (c‚ÇÅ ‚â§ c‚ÇÇ)] [œï.suitable c‚ÇÇ c‚ÇÑ] [œï.suitable c‚ÇÅ c‚ÇÉ] [fact (c‚ÇÉ ‚â§ c‚ÇÑ)] :
--   res V r' c‚ÇÉ c‚ÇÑ n ‚â´ œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÉ =
--     œï.eval_CLCFP V r' c‚ÇÇ c‚ÇÑ ‚â´ res V r' c‚ÇÅ c‚ÇÇ m :=
-- by simp only [res, eval_CLCFP, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp,
--   res_comp_eval_LCFP V r' _ c‚ÇÅ c‚ÇÇ c‚ÇÉ c‚ÇÑ]

-- lemma Tinv_comp_eval_CLCFP [fact (0 < r')] [œï.suitable c‚ÇÅ c‚ÇÇ] :
--   Tinv V r' c‚ÇÇ n ‚â´ œï.eval_CLCFP V r' (r' * c‚ÇÅ) (r' * c‚ÇÇ) =
--     œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ ‚â´ Tinv V r' c‚ÇÅ m :=
-- by simp only [Tinv, eval_CLCFP, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp,
--   Tinv_comp_eval_LCFP V r' _ c‚ÇÅ c‚ÇÇ]

-- lemma T_inv_comp_eval_CLCFP [normed_with_aut r V] [fact (0 < r)] [œï.suitable c‚ÇÅ c‚ÇÇ] :
--   T_inv r V r' c‚ÇÇ n ‚â´ œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ =
--     œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ ‚â´ T_inv r V r' c‚ÇÅ m :=
-- by simp only [T_inv, eval_CLCFP, ‚Üê category_theory.functor.map_comp, ‚Üê op_comp,
--   T_inv_comp_eval_LCFP r V r' c‚ÇÅ c‚ÇÇ]

-- end basic_universal_map

namespace universal_map

variables (œï : universal_map m n)

def eval_CLCFP [œï.suitable c‚ÇÇ c‚ÇÅ] : CLCFP V r' c‚ÇÅ n ‚ü∂ CLCFP V r' c‚ÇÇ m :=
(whisker_right (œï.eval_LCFP V r' c‚ÇÅ c‚ÇÇ) Completion : _)

@[simp] lemma eval_CLCFP_zero :
  (0 : universal_map m n).eval_CLCFP V r' c‚ÇÅ c‚ÇÇ = 0 :=
begin
  simp only [eval_CLCFP, eval_LCFP_zero],
  ext x : 2,
  exact Completion.map_zero _ _
end

open category_theory.limits

lemma eval_CLCFP_comp (g : universal_map m n) (f : universal_map l m)
  [hg : g.suitable c‚ÇÇ c‚ÇÅ] [hf : f.suitable c‚ÇÉ c‚ÇÇ] :
  @eval_CLCFP V r' c‚ÇÅ c‚ÇÉ _ _ (comp g f) (suitable.comp c‚ÇÇ) =
    g.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ ‚â´ f.eval_CLCFP V r' c‚ÇÇ c‚ÇÉ :=
by simp only [eval_CLCFP, ‚Üê whisker_right_comp, eval_LCFP_comp V r' c‚ÇÅ c‚ÇÇ c‚ÇÉ]

lemma res_comp_eval_CLCFP
  [fact (c‚ÇÇ ‚â§ c‚ÇÅ)] [œï.suitable c‚ÇÑ c‚ÇÇ] [œï.suitable c‚ÇÉ c‚ÇÅ] [fact (c‚ÇÑ ‚â§ c‚ÇÉ)] :
  res V r' c‚ÇÅ c‚ÇÇ n ‚â´ œï.eval_CLCFP V r' c‚ÇÇ c‚ÇÑ =
    œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÉ ‚â´ res V r' c‚ÇÉ c‚ÇÑ m :=
by simp only [eval_CLCFP, res, ‚Üê whisker_right_comp]; congr' 1; apply res_comp_eval_LCFP

lemma Tinv_comp_eval_CLCFP [fact (0 < r')] [fact (c‚ÇÇ ‚â§ r' * c‚ÇÅ)] [fact (c‚ÇÑ ‚â§ r' * c‚ÇÉ)]
  [œï.suitable c‚ÇÉ c‚ÇÅ] [œï.suitable c‚ÇÑ c‚ÇÇ] :
  Tinv V r' c‚ÇÅ c‚ÇÇ n ‚â´ œï.eval_CLCFP V r' c‚ÇÇ c‚ÇÑ =
    œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÉ ‚â´ Tinv V r' c‚ÇÉ c‚ÇÑ m :=
by simp only [eval_CLCFP, Tinv_def, ‚Üê whisker_right_comp]; congr' 1; apply Tinv_comp_eval_LCFP

lemma T_inv_comp_eval_CLCFP [normed_with_aut r V] [fact (0 < r)] [œï.suitable c‚ÇÇ c‚ÇÅ] :
  T_inv r V r' c‚ÇÅ n ‚â´ œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ =
    œï.eval_CLCFP V r' c‚ÇÅ c‚ÇÇ ‚â´ T_inv r V r' c‚ÇÇ m :=
by simp only [eval_CLCFP, T_inv_def, ‚Üê whisker_right_comp, T_inv_comp_eval_LCFP]

end universal_map

end breen_deligne
